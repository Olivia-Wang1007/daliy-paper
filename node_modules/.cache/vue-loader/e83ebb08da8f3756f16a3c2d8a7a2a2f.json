{"remainingRequest":"D:\\project\\notebook\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\project\\notebook\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\project\\notebook\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\notebook\\node_modules\\view-design\\src\\components\\table\\table.vue?vue&type=template&id=9bdf4c22&","dependencies":[{"path":"D:\\project\\notebook\\node_modules\\view-design\\src\\components\\table\\table.vue","mtime":1586505627000},{"path":"D:\\project\\notebook\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\notebook\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\project\\notebook\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\notebook\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}