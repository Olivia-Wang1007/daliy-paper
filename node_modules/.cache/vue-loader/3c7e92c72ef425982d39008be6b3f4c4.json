{"remainingRequest":"D:\\project\\notebook\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\notebook\\node_modules\\view-design\\src\\components\\table\\table-body.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\notebook\\node_modules\\view-design\\src\\components\\table\\table-body.vue","mtime":1578888151000},{"path":"D:\\project\\notebook\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\notebook\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\project\\notebook\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\notebook\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["table-body.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"table-body.vue","sourceRoot":"node_modules/view-design/src/components/table","sourcesContent":["<!--\n<template>\n    <table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" :style=\"styleObject\">\n        <colgroup>\n            <col v-for=\"(column, index) in columns\" :width=\"setCellWidth(column)\">\n        </colgroup>\n        <tbody :class=\"[prefixCls + '-tbody']\">\n            <template v-for=\"(row, index) in data\">\n                <table-tr\n                    :draggable=\"draggable\"\n                    :row=\"row\"\n                    :key=\"rowKey ? row._rowKey : index\"\n                    :prefix-cls=\"prefixCls\"\n                    @mouseenter.native.stop=\"handleMouseIn(row._index)\"\n                    @mouseleave.native.stop=\"handleMouseOut(row._index)\"\n                    @click.native=\"clickCurrentRow(row._index)\"\n                    @dblclick.native.stop=\"dblclickCurrentRow(row._index)\">\n                    <td v-for=\"(column, colIndex) in columns\" :class=\"alignCls(column, row)\" v-bind=\"getSpan(row, column, index, colIndex)\" v-if=\"showWithSpan(row, column, index, colIndex)\">\n                        <table-cell\n                            :fixed=\"fixed\"\n                            :prefix-cls=\"prefixCls\"\n                            :row=\"row\"\n                            :key=\"column._columnKey\"\n                            :column=\"column\"\n                            :natural-index=\"index\"\n                            :index=\"row._index\"\n                            :checked=\"rowChecked(row._index)\"\n                            :disabled=\"rowDisabled(row._index)\"\n                            :expanded=\"rowExpanded(row._index)\"\n                        ></table-cell>\n                    </td>\n                </table-tr>\n                <tr v-if=\"rowExpanded(row._index)\" :class=\"{[prefixCls + '-expanded-hidden']: fixed}\">\n                    <td :colspan=\"columns.length\" :class=\"prefixCls + '-expanded-cell'\">\n                        <Expand :key=\"rowKey ? row._rowKey : index\" :row=\"row\" :render=\"expandRender\" :index=\"row._index\"></Expand>\n                    </td>\n                </tr>\n            </template>\n        </tbody>\n    </table>\n</template>\n-->\n<script>\n    // todo :key=\"row\"\n    import TableTr from './table-tr.vue';\n    import TableCell from './cell.vue';\n    import Expand from './expand.js';\n    import Mixin from './mixin';\n\n    export default {\n        name: 'TableBody',\n        mixins: [ Mixin ],\n        components: { TableCell, Expand, TableTr },\n        props: {\n            prefixCls: String,\n            styleObject: Object,\n            columns: Array,\n            data: Array,    // rebuildData\n            objData: Object,\n            columnsWidth: Object,\n            fixed: {\n                type: [Boolean, String],\n                default: false\n            },\n            draggable: {\n                type: Boolean,\n                default: false\n            },\n            rowKey: {\n                type: [Boolean, String],\n                default: false\n            }\n        },\n        computed: {\n            expandRender () {\n                let render = function () {\n                    return '';\n                };\n                for (let i = 0; i < this.columns.length; i++) {\n                    const column = this.columns[i];\n                    if (column.type && column.type === 'expand') {\n                        if (column.render) render = column.render;\n                    }\n                }\n                return render;\n            }\n        },\n        methods: {\n            rowChecked (_index) {\n                return this.objData[_index] && this.objData[_index]._isChecked;\n            },\n            rowDisabled (_index) {\n                return this.objData[_index] && this.objData[_index]._isDisabled;\n            },\n            rowExpanded (_index) {\n                return this.objData[_index] && this.objData[_index]._isExpanded;\n            },\n            rowStatusByRowKey (type, rowKey) {\n                const data = this.$parent.getDataByRowKey(rowKey);\n                return data[type];\n            },\n            handleMouseIn (_index, event, rowKey) {\n                event.stopPropagation();\n                this.$parent.handleMouseIn(_index, rowKey);\n            },\n            handleMouseOut (_index, event, rowKey) {\n                event.stopPropagation();\n                this.$parent.handleMouseOut(_index, rowKey);\n            },\n            clickCurrentRow (_index, event, rowKey) {\n                this.$parent.clickCurrentRow(_index, rowKey);\n            },\n            dblclickCurrentRow (_index, event, rowKey) {\n                event.stopPropagation();\n                this.$parent.dblclickCurrentRow(_index, rowKey);\n            },\n            contextmenuCurrentRow (_index, event, rowKey) {\n                event.stopPropagation();\n                if (this.$parent.contextMenu) event.preventDefault();\n                this.$parent.contextmenuCurrentRow(_index, rowKey, event);\n            },\n            getSpan (row, column, rowIndex, columnIndex) {\n                const fn = this.$parent.spanMethod;\n                if (typeof fn === 'function') {\n                    const result = fn({\n                        row,\n                        column,\n                        rowIndex,\n                        columnIndex\n                    });\n                    let rowspan = 1;\n                    let colspan = 1;\n                    if (Array.isArray(result)) {\n                        rowspan = result[0];\n                        colspan = result[1];\n                    } else if (typeof result === 'object') {\n                        rowspan = result.rowspan;\n                        colspan = result.colspan;\n                    }\n                    return {\n                        rowspan,\n                        colspan\n                    };\n                } else {\n                    return {};\n                }\n            },\n            showWithSpan (row, column, rowIndex, columnIndex) {\n                const result = this.getSpan(row, column, rowIndex, columnIndex);\n                return !(('rowspan' in result && result.rowspan === 0) || ('colspan' in result && result.colspan === 0));\n            },\n            isTrShow (rowKey) {\n                let status = true;\n                let child;\n                for (let i in this.objData) {\n                    const row = this.objData[i];\n                    const showChildren = row._isShowChildren;\n                    if (row._rowKey === rowKey) {\n                        status = status && showChildren;\n                        break;\n                    } else if (row.children && row.children.length) {\n                        child = this.getTrStatus(rowKey, row, status && showChildren);\n                        if (child[0] && child[0]._rowKey === rowKey) {\n                            return child[1];\n                        }\n                    }\n                }\n                return status;\n            },\n            getTrStatus (rowKey, data, parentStatus) {\n                let status = parentStatus;\n                let childData;\n                if (data.children && data.children.length) {\n                    for (let i = 0; i < data.children.length; i++) {\n                        const row = data.children[i];\n                        const showChildren = row._isShowChildren;\n                        if (row._rowKey === rowKey) {\n                            childData = row;\n                            status = status && showChildren;\n                            break;\n                        } else if (row.children && row.children.length) {\n                            const child = this.getTrStatus(rowKey, row, status && showChildren);\n                            if (child[0] && child[0]._rowKey === rowKey) {\n                                return child;\n                            }\n                        }\n                    }\n                }\n                return [childData, status];\n            },\n            getLevel (rowKey) {\n                let level;\n                let child;\n                for (let i = 0; i < this.data.length; i++) {\n                    const row = this.data[i];\n                    if (row[this.rowKey] === rowKey) {\n                        level = 0;\n                        break;\n                    } else if (row.children && row.children.length) {\n                        child = this.getChildLevel(row, rowKey, 1);\n                        if (child[0] && child[0][this.rowKey] === rowKey) {\n                            return child[1];\n                        }\n                    }\n                }\n                return level;\n            },\n            getChildLevel (data, rowKey, level) {\n                let newLevel;\n                let childData;\n                if (data.children && data.children.length) {\n                    for (let i = 0; i < data.children.length; i++) {\n                        const row = data.children[i];\n                        if (row[this.rowKey] === rowKey) {\n                            childData = row;\n                            newLevel = level;\n                            break;\n                        } else if (row.children && row.children.length) {\n                            const child = this.getChildLevel(row, rowKey, level + 1);\n                            if (child[0] && child[0][this.rowKey] === rowKey) {\n                                return child;\n                            }\n                        }\n                    }\n                }\n                return [childData, newLevel];\n            },\n            getChildNode (h, data, nodes) {\n                if (data.children && data.children.length) {\n                    data.children.forEach((row, index) => {\n                        let $tds = [];\n\n                        this.columns.forEach((column, colIndex) => {\n                            if (this.showWithSpan(row, column, index, colIndex)) {\n                                const $tableCell = h(TableCell, {\n                                    props: {\n                                        fixed: this.fixed,\n                                        'prefix-cls': this.prefixCls,\n                                        row: row,\n                                        column: column,\n                                        'natural-index': index,\n                                        index: row._index,\n                                        checked: this.rowStatusByRowKey('_isChecked', row._rowKey),\n                                        disabled: this.rowStatusByRowKey('_isDisabled', row._rowKey),\n                                        expanded: this.rowStatusByRowKey('_isExpanded', row._rowKey),\n                                        treeNode: true,\n                                        treeLevel: this.getLevel(row._rowKey)\n                                    },\n                                    key: column._columnKey,\n                                });\n\n                                const $td = h('td', {\n                                    class: this.alignCls(column, row),\n                                    attrs: this.getSpan(row, column, index, colIndex)\n                                }, [$tableCell]);\n                                $tds.push($td);\n                            }\n                        });\n\n                        // 判断节点是否展开\n                        const trStyle = {};\n                        if (!this.isTrShow(data._rowKey)) trStyle.display = 'none';\n\n                        const $tableTr = h(TableTr, {\n                            props: {\n                                draggable: false,\n                                row: row,\n                                'prefix-cls': this.prefixCls,\n                                isChildren: true\n                            },\n                            style: trStyle,\n                            key: this.rowKey ? row._rowKey : index,\n                            nativeOn: {\n                                mouseenter: (e) => this.handleMouseIn(row._index, e, row._rowKey),\n                                mouseleave: (e) => this.handleMouseOut(row._index, e, row._rowKey),\n                                click: (e) => this.clickCurrentRow(row._index, e, row._rowKey),\n                                dblclick: (e) => this.dblclickCurrentRow(row._index, e, row._rowKey),\n                                contextmenu: (e) => this.contextmenuCurrentRow(row._index, e, row._rowKey)\n                            }\n                        }, $tds);\n\n                        nodes.push($tableTr);\n\n                        if (row.children && row.children.length) {\n                            this.getChildNode(h, row, nodes);\n                        }\n                    });\n                    return nodes;\n                } else {\n                    return nodes;\n                }\n            }\n        },\n        render (h) {\n            let $cols = [];\n            this.columns.forEach(column => {\n                const $col = h('col', {\n                    attrs: {\n                        width: this.setCellWidth(column)\n                    }\n                });\n                $cols.push($col);\n            });\n            const $colgroup = h('colgroup', {}, $cols);\n\n            let $tableTrs = [];\n            this.data.forEach((row, index) => {\n                let $tds = [];\n\n                this.columns.forEach((column, colIndex) => {\n                    if (this.showWithSpan(row, column, index, colIndex)) {\n                        const $tableCell = h(TableCell, {\n                            props: {\n                                fixed: this.fixed,\n                                'prefix-cls': this.prefixCls,\n                                row: row,\n                                column: column,\n                                'natural-index': index,\n                                index: row._index,\n                                checked: this.rowChecked(row._index),\n                                disabled: this.rowDisabled(row._index),\n                                expanded: this.rowExpanded(row._index)\n                            },\n                            key: column._columnKey,\n                        });\n\n                        const $td = h('td', {\n                            class: this.alignCls(column, row),\n                            attrs: this.getSpan(row, column, index, colIndex)\n                        }, [$tableCell]);\n                        $tds.push($td);\n                    }\n                });\n\n                const $tableTr = h(TableTr, {\n                    props: {\n                        draggable: this.draggable,\n                        row: row,\n                        'prefix-cls': this.prefixCls\n                    },\n                    key: this.rowKey ? row._rowKey : index,\n                    nativeOn: {\n                        mouseenter: (e) => this.handleMouseIn(row._index, e),\n                        mouseleave: (e) => this.handleMouseOut(row._index, e),\n                        click: (e) => this.clickCurrentRow(row._index, e),\n                        dblclick: (e) => this.dblclickCurrentRow(row._index, e),\n                        contextmenu: (e) => this.contextmenuCurrentRow(row._index, e)\n                    }\n                }, $tds);\n                $tableTrs.push($tableTr);\n\n                // 可展开\n                if (this.rowExpanded(row._index)) {\n                    const $Expand = h(Expand, {\n                        props: {\n                            row: row,\n                            render: this.expandRender,\n                            index: row._index\n                        },\n                        key: this.rowKey ? row._rowKey : index\n                    });\n                    const $td = h('td', {\n                        attrs: {\n                            colspan: this.columns.length\n                        },\n                        class: this.prefixCls + '-expanded-cell'\n                    }, [$Expand]);\n                    const $tr = h('tr', {\n                        class: {\n                            [this.prefixCls + '-expanded-hidden']: this.fixed\n                        }\n                    }, [$td]);\n                    $tableTrs.push($tr);\n                }\n\n                // 子数据\n                if (row.children && row.children.length) {\n                    const $childNodes = this.getChildNode(h, row, []);\n                    $childNodes.forEach(item => {\n                        $tableTrs.push(item);\n                    });\n                }\n            });\n\n            const $tbody = h('tbody', {\n                class: this.prefixCls + '-tbody'\n            }, [$tableTrs]);\n\n            return h('table', {\n                attrs: {\n                    cellspacing: '0',\n                    cellpadding: '0',\n                    border: '0'\n                },\n                style: this.styleObject\n            }, [$colgroup, $tbody]);\n        }\n    };\n</script>\n"]}]}